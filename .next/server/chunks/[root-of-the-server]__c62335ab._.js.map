{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///D:/stacky%20patel%20next%20js/GPT%20next%20project/nextauth-demo/src/lib/mongodb.js"],"sourcesContent":["import mongoose from 'mongoose';\n\nexport async function connectDB() {\n  try {\n    if (mongoose.connection.readyState >= 1) {\n      console.log(\"Already connected\");\n      return;\n    }\n\n    console.log(\"Connecting to MongoDB...\");\n    await mongoose.connect(process.env.MONGO_URI);\n    console.log(\"MongoDB connected!\");\n    \n  } catch (err) {\n    console.error(\"MongoDB connection error:\", err);\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe;IACpB,IAAI;QACF,IAAI,oHAAQ,CAAC,UAAU,CAAC,UAAU,IAAI,GAAG;YACvC,QAAQ,GAAG,CAAC;YACZ;QACF;QAEA,QAAQ,GAAG,CAAC;QACZ,MAAM,oHAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,SAAS;QAC5C,QAAQ,GAAG,CAAC;IAEd,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,6BAA6B;IAC7C;AACF","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///D:/stacky%20patel%20next%20js/GPT%20next%20project/nextauth-demo/src/models/Blog.js"],"sourcesContent":["// models/Blog.js\nimport mongoose from \"mongoose\";\n\nconst BlogSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n  },\n  content: {\n    type: String,\n    required: true,\n  },\n  userId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: \"User\",\n    required: true,\n  },\n  views: {\n    type: Number,\n    default: 0,\n    required: true,   \n    min: 0,\n  },\n   likes: {\n     type: Number,\n     default: 0,\n     required: true\n       },\n\n  dislikes: { \n    type: Number, \n    default: 0, \n    required: true \n  },   \n  likedBy: [{ \n    type: mongoose.Schema.Types.ObjectId, \n    ref: \"User\" \n  }],\n  dislikedBy: [{ \n    type: mongoose.Schema.Types.ObjectId, \n    ref: \"User\" \n  }],\n\n}, { timestamps: true });\n\nexport default mongoose.models.Blog || mongoose.model(\"Blog\", BlogSchema);\n"],"names":[],"mappings":"AAAA,iBAAiB;;;;;AACjB;;AAEA,MAAM,aAAa,IAAI,oHAAQ,CAAC,MAAM,CAAC;IACrC,OAAO;QACL,MAAM;QACN,UAAU;IACZ;IACA,SAAS;QACP,MAAM;QACN,UAAU;IACZ;IACA,QAAQ;QACN,MAAM,oHAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,OAAO;QACL,MAAM;QACN,SAAS;QACT,UAAU;QACV,KAAK;IACP;IACC,OAAO;QACL,MAAM;QACN,SAAS;QACT,UAAU;IACR;IAEL,UAAU;QACR,MAAM;QACN,SAAS;QACT,UAAU;IACZ;IACA,SAAS;QAAC;YACR,MAAM,oHAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACP;KAAE;IACF,YAAY;QAAC;YACX,MAAM,oHAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACP;KAAE;AAEJ,GAAG;IAAE,YAAY;AAAK;uCAEP,oHAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,oHAAQ,CAAC,KAAK,CAAC,QAAQ","debugId":null}},
    {"offset": {"line": 195, "column": 0}, "map": {"version":3,"sources":["file:///D:/stacky%20patel%20next%20js/GPT%20next%20project/nextauth-demo/src/models/User.js"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst UserSchema = new mongoose.Schema({\n    name : {\n        type : String\n    },\n    email :{\n        type : String,\n        unique : true\n    },\n    password :{\n        type : String,\n        required : true\n    }\n})\n\nexport default mongoose.models.User || mongoose.model('User', UserSchema)"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,aAAa,IAAI,oHAAQ,CAAC,MAAM,CAAC;IACnC,MAAO;QACH,MAAO;IACX;IACA,OAAO;QACH,MAAO;QACP,QAAS;IACb;IACA,UAAU;QACN,MAAO;QACP,UAAW;IACf;AACJ;uCAEe,oHAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,oHAAQ,CAAC,KAAK,CAAC,QAAQ","debugId":null}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":["file:///D:/stacky%20patel%20next%20js/GPT%20next%20project/nextauth-demo/src/config/auth.js"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport GitHubProvider from \"next-auth/providers/github\";\nimport { connectDB } from \"@/lib/mongodb\";\nimport User from \"@/models/User\";\nimport bcrypt from \"bcrypt\";\n\nexport const authOptions = {\n  providers: [\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"text\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        await connectDB();\n        const user = await User.findOne({ email: credentials.email });\n        if (!user)  throw new Error(\"Invalid credentials\");\n\n        const isPasswordCorrect = await bcrypt.compare(\n          credentials.password,\n          user.password\n        );\n        if (!isPasswordCorrect) throw new Error(\"Invalid credentials\");\n\n        return { id: user._id.toString(), name: user.name, email: user.email };\n      },\n    }),\n    GitHubProvider({\n      clientId: process.env.GITHUB_ID,\n      clientSecret: process.env.GITHUB_SECRET,\n    }),\n  ],\n\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n        token.email = user.email;\n        token.name = user.name;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user.id = token.id;\n        session.user.email = token.email;\n        session.user.name = token.name;\n      }\n      return session;\n    },\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n};\n\n// ðŸ‘‡ handler ko NextAuth(authOptions) ke sath banao\nconst handler = NextAuth(authOptions);\n\n// ðŸ‘‡ isse GET/POST aur authOptions dono export ho jayenge\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEO,MAAM,cAAc;IACzB,WAAW;QACT,IAAA,qKAAmB,EAAC;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,MAAM,IAAA,oIAAS;gBACf,MAAM,OAAO,MAAM,kIAAI,CAAC,OAAO,CAAC;oBAAE,OAAO,YAAY,KAAK;gBAAC;gBAC3D,IAAI,CAAC,MAAO,MAAM,IAAI,MAAM;gBAE5B,MAAM,oBAAoB,MAAM,gHAAM,CAAC,OAAO,CAC5C,YAAY,QAAQ,EACpB,KAAK,QAAQ;gBAEf,IAAI,CAAC,mBAAmB,MAAM,IAAI,MAAM;gBAExC,OAAO;oBAAE,IAAI,KAAK,GAAG,CAAC,QAAQ;oBAAI,MAAM,KAAK,IAAI;oBAAE,OAAO,KAAK,KAAK;gBAAC;YACvE;QACF;QACA,IAAA,gKAAc,EAAC;YACb,UAAU,QAAQ,GAAG,CAAC,SAAS;YAC/B,cAAc,QAAQ,GAAG,CAAC,aAAa;QACzC;KACD;IAED,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,KAAK,GAAG,KAAK,KAAK;gBACxB,MAAM,IAAI,GAAG,KAAK,IAAI;YACxB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;gBAChC,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAChC;YACA,OAAO;QACT;IACF;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACrC;AAEA,oDAAoD;AACpD,MAAM,UAAU,IAAA,kJAAQ,EAAC","debugId":null}},
    {"offset": {"line": 312, "column": 0}, "map": {"version":3,"sources":["file:///D:/stacky%20patel%20next%20js/GPT%20next%20project/nextauth-demo/src/app/api/blogs/%5Bid%5D/like/route.js"],"sourcesContent":["import { connectDB } from \"@/lib/mongodb\";\nimport Blog from \"@/models/Blog\";\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"@/config/auth\";\nimport { NextResponse } from \"next/server\";\n\nexport async function POST(req, { params }) {\n  await connectDB();\n  const session = await getServerSession(authOptions);\n\n  if (!session) {\n    return NextResponse.json({ success: false, error: \"Not authenticated\" });\n  }\n\n  const userId = session.user.id;\n  const blogId = ((await params).id);\n\n  try {\n    const blog = await Blog.findById(blogId);\n    if (!blog) {\n      return NextResponse.json({ success: false, error: \"Blog not found\" });\n    }\n\n    // agar already liked hai to hata do (toggle like)\n    if (blog.likedBy.includes(userId)) {\n      blog.likedBy.pull(userId);\n      blog.likes = blog.likes - 1;\n    } else {\n      // agar dislike kiya tha pehle â†’ use hatao\n      if (blog.dislikedBy.includes(userId)) {\n        blog.dislikedBy.pull(userId);\n        blog.dislikes = blog.dislikes - 1;\n      }\n\n      // fir like add karo\n      blog.likedBy.push(userId);\n      blog.likes = blog.likes + 1;\n    }\n\n    await blog.save();\n    return NextResponse.json({ success: true, message : 'Liked',  blog });\n  } catch (err) {\n    return NextResponse.json({ success: false, error: err.message });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,eAAe,KAAK,GAAG,EAAE,EAAE,MAAM,EAAE;IACxC,MAAM,IAAA,oIAAS;IACf,MAAM,UAAU,MAAM,IAAA,2JAAgB,EAAC,sIAAW;IAElD,IAAI,CAAC,SAAS;QACZ,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,OAAO;QAAoB;IACxE;IAEA,MAAM,SAAS,QAAQ,IAAI,CAAC,EAAE;IAC9B,MAAM,SAAU,CAAC,MAAM,MAAM,EAAE,EAAE;IAEjC,IAAI;QACF,MAAM,OAAO,MAAM,kIAAI,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,OAAO;YAAiB;QACrE;QAEA,kDAAkD;QAClD,IAAI,KAAK,OAAO,CAAC,QAAQ,CAAC,SAAS;YACjC,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,KAAK,GAAG,KAAK,KAAK,GAAG;QAC5B,OAAO;YACL,0CAA0C;YAC1C,IAAI,KAAK,UAAU,CAAC,QAAQ,CAAC,SAAS;gBACpC,KAAK,UAAU,CAAC,IAAI,CAAC;gBACrB,KAAK,QAAQ,GAAG,KAAK,QAAQ,GAAG;YAClC;YAEA,oBAAoB;YACpB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,KAAK,GAAG,KAAK,KAAK,GAAG;QAC5B;QAEA,MAAM,KAAK,IAAI;QACf,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,SAAU;YAAU;QAAK;IACrE,EAAE,OAAO,KAAK;QACZ,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,OAAO,IAAI,OAAO;QAAC;IAChE;AACF","debugId":null}}]
}